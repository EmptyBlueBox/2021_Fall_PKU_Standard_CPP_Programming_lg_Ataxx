#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <iomanip>
#include <fstream>
#include <stdlib.h>
#include <algorithm>
#include <windows.h>

//#define KEY_DOWN(VK_NONAME) ((GetAsyncKeyState(VK_NONAME) & 0x8000) ? 1:0)  //用来检测按键的点击事件
using namespace std;
HANDLE hOutput;
HWND h = GetForegroundWindow();
CONSOLE_FONT_INFO Char;
//所有输出函数之前都要有清屏函数
int chsBoard[8][8] = { 0 };//黑棋先行，黑棋1，白棋-1
int chess[3][8][8] = { 0 };//黑棋2，白棋1
int tempchsBoard[10][8][8] = { 0 };//黑棋先行，黑棋1，白棋-1
int tempchess[10][3][8][8] = { 0 };//黑棋2，白棋1
int last_step_chsBoard[8][8] = { 0 };//黑棋先行，黑棋1，白棋-1
int last_step_tempchess[3][8][8] = { 0 };//黑棋2，白棋1
int col = 1;
int userCol;
int flag_gotomenu = 0;
int flag_is2 = 0;
int cnt1 = 0; int cnt2 = 0;//剪枝个数
/*************************************************************************************************************************************/

//打印棋盘
void plot()
{
	int i, j, k, l;//循环变量

	system("cls");
	cout << "  \033[42m\033[30m┌───┬───┬───┬───┬───┬───┬───┐\033[0m" << "\033[42m \033[0m" << endl;

	for (i = 1; i <= 7; i++)
	{
		cout << 8 - i << " ";
		cout << "\033[42m\033[30m│\033[0m";
		for (j = 1; j <= 7; j++)
		{
			if (chsBoard[i][j] == 1)
			{
				cout << "\033[42m\033[31m ●\033[0m\033[42m\033[30m│\033[0m";
			}
			else if (chsBoard[i][j] == 2)
			{
				cout << "\033[42m\033[31m ○\033[0m\033[42m\033[30m│\033[0m";
			}
			else if (chsBoard[i][j] == -1)
			{
				cout << "\033[42m\033[33m ●\033[0m\033[42m\033[30m│\033[0m";
			}
			else if (chsBoard[i][j] == -2)
			{
				cout << "\033[42m\033[33m ○\033[0m\033[42m\033[30m│\033[0m";
			}
			else
			{
				cout << "\033[42m\033[30m   │\033[0m";
			}
		}
		cout << "\033[42m \033[0m";
		cout << endl;
		if (i <= 6)
		{
			cout << "  \033[42m\033[30m├───┼───┼───┼───┼───┼───┼───┤\033[0m" << "\033[42m \033[0m" << endl;
		}
	}
	cout << "  \033[42m\033[30m└───┴───┴───┴───┴───┴───┴───┘\033[0m" << "\033[42m \033[0m" << endl;
	cout << "     1   2   3   4   5   6   7" << endl;

	cout << "         \033[45m\033[30m┌──────┬──────┐ \033[0m" << endl;
	cout << "         \033[45m\033[30m│  退出│  保存│ \033[0m" << endl;
	cout << "         \033[45m\033[30m├──────┼──────┤ \033[0m" << endl;
	cout << "         \033[45m\033[30m│  返回│  悔棋│ \033[0m" << endl;
	cout << "         \033[45m\033[30m└──────┴──────┘ \033[0m" << endl;

	cout << "     \033[41m红棋个数" << chess[2][0][0] << "\033[0m" << " " << "   \033[43m\033[30m黄棋个数" << chess[0][0][0] << "\033[0m" << endl;
}
void plot2()
{
	int i, j, k, l;//循环变量

	system("cls");
	cout << "  \033[42m\033[30m┌───┬───┬───┬───┬───┬───┬───┐\033[0m" << "\033[42m \033[0m" << endl;

	for (i = 1; i <= 7; i++)
	{
		cout << 8 - i << " ";
		cout << "\033[42m\033[30m│\033[0m";
		for (j = 1; j <= 7; j++)
		{
			if (chsBoard[i][j] == 1)
			{
				cout << "\033[42m\033[31m ●\033[0m\033[42m\033[30m│\033[0m";
			}
			else if (chsBoard[i][j] == 2)
			{
				cout << "\033[42m\033[31m ○\033[0m\033[42m\033[30m│\033[0m";
			}
			else if (chsBoard[i][j] == -1)
			{
				cout << "\033[42m\033[33m ●\033[0m\033[42m\033[30m│\033[0m";
			}
			else if (chsBoard[i][j] == -2)
			{
				cout << "\033[42m\033[33m ○\033[0m\033[42m\033[30m│\033[0m";
			}
			else
			{
				cout << "\033[42m\033[30m   │\033[0m";
			}
		}
		cout << "\033[42m \033[0m";
		cout << endl;
		if (i <= 6)
		{
			cout << "  \033[42m\033[30m├───┼───┼───┼───┼───┼───┼───┤\033[0m" << "\033[42m \033[0m" << endl;
		}
	}
	cout << "  \033[42m\033[30m└───┴───┴───┴───┴───┴───┴───┘\033[0m" << "\033[42m \033[0m" << endl;
	cout << "     1   2   3   4   5   6   7" << endl;

	cout << "         \033[45m\033[30m┌──────┬──────┐ \033[0m" << endl;
	cout << "         \033[45m\033[30m│  退出│  保存│ \033[0m" << endl;
	cout << "         \033[45m\033[30m├──────┼──────┘ \033[0m" << endl;
	cout << "         \033[45m\033[30m│  返回│ \033[0m" << endl;
	cout << "         \033[45m\033[30m└──────┘ \033[0m" << endl;


	cout << "     \033[41m红棋个数" << chess[2][0][0] << "\033[0m" << " " << "   \033[43m\033[30m黄棋个数" << chess[0][0][0] << "\033[0m" << endl;
}
//输出谁该落子了
void whoIsNext()
{
	if (col == 1)
	{
		cout << "        \033[41m现在该红棋落子了\033[0m" << endl << endl;
	}
	else if (col == -1)
	{
		cout << "        \033[43m\033[30m现在该黄棋落子了\033[0m" << endl << endl;
	}
}
//复制棋盘与棋子
void cpy(int step)
{
	int i, j;//循环变量

	for (i = 0; i <= 7; i++)
	{
		for (j = 0; j <= 7; j++)
		{
			tempchsBoard[step][i][j] = chsBoard[i][j];
			tempchess[step][0][i][j] = chess[0][i][j];
			tempchess[step][2][i][j] = chess[2][i][j];
		}
	}
}
//重置棋盘与棋子
void rcpy(int step)
{
	int i, j, k, l;//循环变量

	for (i = 0; i <= 7; i++)
	{
		for (j = 0; j <= 7; j++)
		{
			chsBoard[i][j] = tempchsBoard[step][i][j];
			chess[0][i][j] = tempchess[step][0][i][j];
			chess[2][i][j] = tempchess[step][2][i][j];
		}
	}
}
//存储上一步棋
void save_last_step()
{
	int i, j;//循环变量

	for (i = 0; i <= 7; i++)
	{
		for (j = 0; j <= 7; j++)
		{
			if (abs(chsBoard[i][j]) == 1)
				last_step_chsBoard[i][j] = chsBoard[i][j];
			else
				last_step_chsBoard[i][j] = chsBoard[i][j] / 2;
			last_step_tempchess[0][i][j] = chess[0][i][j];
			last_step_tempchess[2][i][j] = chess[2][i][j];
		}
	}
}
//恢复上一步棋的局面
void reload_last_step()
{
	int i, j;//循环变量

	for (i = 0; i <= 7; i++)
	{
		for (j = 0; j <= 7; j++)
		{
			chsBoard[i][j] = last_step_chsBoard[i][j];
			chess[0][i][j] = last_step_tempchess[0][i][j];
			chess[2][i][j] = last_step_tempchess[2][i][j];
		}
	}
}
/*************************************************************************************************************************************/
//鼠标操作
POINT p;
void getCursorPos()
{
	while (1)
	{
		if ((GetAsyncKeyState(VK_LBUTTON) & 0x8000) ? 1 : 0)
		{
			GetCursorPos(&p);
			ScreenToClient(h, &p);               //获取鼠标在窗口上的位置
			break;
		}
		Sleep(100);
	}
}
/*************************************************************************************************************************************/
//判断函数
 
//判断该子是否可以移动 
bool judgeOne(int m, int n)
{
	int i, j, k, l;//循环变量

	for (i = m - 2; i <= m + 2; i++)
	{
		for (j = n - 2; j <= n + 2; j++)
		{
			if (i <= 0 || i >= 8 || j <= 0 || j >= 8)
			{
				continue;
			}
			if (chsBoard[i][j] == 0)
			{
				return true;
			}
		}
	}
	return false;
}
//判断该颜色棋这一轮是否可以移动
bool judgeAll(int col)
{
	int i, j, k, l;//循环变量

	for (i = 1; i <= 7; i++)
	{
		for (j = 1; j <= 7; j++)
		{
			if (chess[col + 1][i][j] == true)
			{
				if (judgeOne(i, j) == true)
				{
					return true;
				}
			}
		}
	}
	return false;
}
//判断新下的一步棋是否在子m,n的5*5范围内
bool valid(int m, int n, int x, int y)
{
	int i, j, k, l;//循环变量

	if (abs(m - x) > 2 || abs(n - y) > 2)
		return false;
	else if (m == x && y == n)
		return false;
	else if (chsBoard[x][y] != 0)
		return false;
	else
		return true;

}
//判断棋局是否结束,true为已结束
bool judgeEnd()
{
	int i, j, k, l;//循环变量

	if (judgeAll(-1) == false && judgeAll(1) == false)//下不了了
	{
		return true;
	}
	int cnt1 = 0, cnt2 = 0;
	for (i = 1; i <= 7; i++)//某种棋不存在了
	{
		for (j = 1; j <= 7; j++)
		{
			if (chess[2][i][j] == true)
				cnt1++;
			else if (chess[0][i][j] == true)
				cnt2++;
		}
	}
	if (cnt1 == 0 || cnt2 == 0)
		return true;
	return false;
}
//判断输赢，true红赢 false黄赢
bool whoWin()
{
	int i, j, k, l;//循环变量

	int cnt1 = 0, cnt2 = 0;
	for (i = 1; i <= 7; i++)
	{
		for (j = 1; j <= 7; j++)
		{
			if (chess[2][i][j] == true)
				cnt1++;
			else if (chess[0][i][j] == true)
				cnt2++;
		}
	}

	if (cnt1 > cnt2)
		return true;
	else
		return false;
}
/*************************************************************************************************************************************/
//获取玩家意图的函数
//存档
void saveFile()
{
	int i, j, k, l;//循环变量

	fstream info;
	info.open("info.txt");
	info << userCol << " " << col << " ";
	for (i = 0; i <= 7; i++)
	{
		for (j = 0; j <= 7; j++)
		{
			if (abs(chsBoard[i][j]) == 1)
				info << chsBoard[i][j] << " " << chess[0][i][j] << " " << chess[2][i][j] << " ";
			else
				info << chsBoard[i][j] / 2 << " " << chess[0][i][j] << " " << chess[2][i][j] << " ";
		}
	}
	info.close();
}
//输出初始菜单并获得玩家的要求游戏方式
int menu()
{
	int i, j, k, l;//循环变量

	system("cls");

	cout << "请选择您的游戏方式" << endl;
	cout << "1、单人游戏" << endl << "2、双人游戏" << endl << "3、读取存档" << endl << "4、退出游戏" << endl;

flagmenu:;
	char userChoice;
	cin.clear();
	userChoice = getchar();

	string discard;
	getline(cin, discard);//防止一次输入多个数字

	if ((userChoice != '1' && userChoice != '2' && userChoice != '3' && userChoice != '4')||(!discard.empty()))
	{
		system("cls");
		cout << "请选择您的游戏方式" << endl;
		cout << "1、单人游戏" << endl << "2、双人游戏" << endl << "3、读取存档" << endl << "4、退出游戏" << endl << endl;
		cout << "没有这种游戏方法哦" << endl << "请重新输入" << endl << endl;
		goto flagmenu;
	}
	return int(userChoice - '0');
}
//了解玩家想操作红棋还是黄棋
int getCol()
{
	int i, j, k, l;//循环变量

	system("cls");

	cout << "那么你想操作红棋还是黄棋呢" << endl;
	cout << "p.s.红棋先行" << endl;
	cout << "1、红棋" << endl << "2、黄棋" << endl;
flaggetcol: {};
	char temp;
	cin.clear();
	temp = getchar();

	string discard;
	getline(cin, discard);//防止一次输入多个数字

	if ((temp != '1' && temp != '2') || (!discard.empty()))
	{
		system("cls");
		cout << "那么你想操作红棋还是黄棋呢" << endl;
		cout << "p.s.红棋先行" << endl;
		cout << "1、红棋" << endl << "2、黄棋" << endl << endl;
		cout << "没有这种颜色的棋哦" << endl << "请重新输入" << endl << endl;
		goto flaggetcol;
	}

	if (temp == '1')
		return 1;
	else if (temp == '2')
		return -1;
}
//获取玩家想要操作的棋子,输入玩家的棋颜色，返回玩家操作的棋子坐标
int select(int col)
{
	int i, j, k, l;//循环变量

flagSelect: {};
	cout << "请选择你的棋子" << endl;
	getCursorPos();
	int x = p.x;
	int y = p.y;
	int temp;
	GetCurrentConsoleFont(hOutput, FALSE, &Char);
	x /= Char.dwFontSize.X;
	y /= (Char.dwFontSize.Y / 2);
	x = (x + 1) / 4;
	y = (y + 3) / 4;
	swap(x, y);

	if (x == 9 && (y == 3 || y == 4))//退出游戏
	{
		system("cls");
		plot();
		cout << "游戏已退出" << endl << "-----------------------------------";
		return 0;
	}
	if (x == 9 && (y == 5 || y == 6))//保存游戏
	{
		saveFile();
		system("cls");
		plot();
		//whoIsNext();
		cout << "游戏已保存" << endl;
		goto flagSelect;
	}
	if (x == 10 && (y == 3 || y == 4))//返回菜单
	{
		system("cls");
		flag_gotomenu = 1;
		return 0;
	}
	if (x == 10 && (y == 5 || y == 6))//悔棋
	{
		system("cls");
		reload_last_step();
		plot();
		goto flagSelect;
	}

	if (!(abs(chess[col + 1][x][y]) == 1))//判断有无玩家的棋子
	{
		system("cls");
		plot();
		cout << "这里不可以哦" << endl;
		goto flagSelect;
	}
	if (judgeOne(x, y) == false)//判断这个棋可不可以移动
	{
		system("cls");
		plot();
		cout << "这个棋子不能操作了哦" << endl;
		goto flagSelect;
	}
	chsBoard[x][y] *= 2;
	system("cls");
	plot();
	return x * 10 + y;//十位是行数，个位是列数
}
int select2(int col)
{
	int i, j, k, l;//循环变量

flagSelect: {};
	cout << "请选择你的棋子" << endl;
	getCursorPos();
	int x = p.x;
	int y = p.y;
	int temp;
	GetCurrentConsoleFont(hOutput, FALSE, &Char);
	x /= Char.dwFontSize.X;
	y /= (Char.dwFontSize.Y / 2);
	x = (x + 1) / 4;
	y = (y + 3) / 4;
	swap(x, y);

	if (x == 9 && (y == 3 || y == 4))//退出游戏
	{
		system("cls");
		plot2();
		cout << "游戏已退出" << endl << "-----------------------------------";
		return 0;
	}
	if (x == 9 && (y == 5 || y == 6))//保存游戏
	{
		saveFile();
		system("cls");
		plot2();
		//whoIsNext();
		cout << "游戏已保存" << endl;
		goto flagSelect;
	}
	if (x == 10 && (y == 3 || y == 4))//返回菜单
	{
		system("cls");
		flag_gotomenu = 1;
		return 0;
	}

	if (!(abs(chess[col + 1][x][y]) == 1))//判断有无玩家的棋子
	{
		system("cls");
		plot2();
		cout << "这里不可以哦" << endl;
		goto flagSelect;
	}
	if (judgeOne(x, y) == false)//判断这个棋可不可以移动
	{
		system("cls");
		plot2();
		cout << "这个棋子不能操作了哦" << endl;
		goto flagSelect;
	}
	chsBoard[x][y] *= 2;
	system("cls");
	plot2();
	return x * 10 + y;//十位是行数，个位是列数
}
//获取玩家要操作的棋子走到哪里
int towhere(int m, int n)
{
	int i, j;//循环变量

flagToWhere: {};
	cout << "请选择这个棋子要走到哪里" << endl;
	getCursorPos();
	int x = p.x;
	int y = p.y;
	int temp;
	GetCurrentConsoleFont(hOutput, FALSE, &Char);
	x /= Char.dwFontSize.X;
	y /= (Char.dwFontSize.Y / 2);
	x = (x + 1) / 4;
	y = (y + 3) / 4;
	swap(x, y);

	if (x == 9 && (y == 3 || y == 4))
	{
		system("cls");
		plot();
		cout << "游戏已退出" << endl << "-----------------------------------";
		return 0;
	}
	if (x == 9 && (y == 5 || y == 6))
	{
		saveFile();
		system("cls");
		plot();
		cout << "游戏已保存" << endl;
		goto flagToWhere;
	}
	if (x == 10 && (y == 3 || y == 4))//返回菜单
	{
		system("cls");
		flag_gotomenu = 1;
		return 0;
	}
	if (x == 10 && (y == 5 || y == 6))//悔棋
	{
		system("cls");
		reload_last_step();
		plot();
		return -1;
	}

	if (chsBoard[x][y] == col)
	{
		return x * -10 - y;
	}
	if (!valid(m, n, x, y))//判断有无玩家的棋子,是否超出范围2
	{
		system("cls");
		plot();
		cout << "你不能下在这里哦" << endl;
		goto flagToWhere;
	}

	return x * 10 + y;//十位是行数，个位是列数
}
int towhere2(int m, int n)
{
	int i, j;//循环变量

flagToWhere: {};
	cout << "请选择这个棋子要走到哪里" << endl;
	getCursorPos();
	int x = p.x;
	int y = p.y;
	int temp;
	GetCurrentConsoleFont(hOutput, FALSE, &Char);
	x /= Char.dwFontSize.X;
	y /= (Char.dwFontSize.Y / 2);
	x = (x + 1) / 4;
	y = (y + 3) / 4;
	swap(x, y);

	if (x == 9 && (y == 3 || y == 4))
	{
		system("cls");
		plot2();
		cout << "游戏已退出" << endl << "-----------------------------------";
		return 0;
	}
	if (x == 9 && (y == 5 || y == 6))
	{
		saveFile();
		system("cls");
		plot2();
		cout << "游戏已保存" << endl;
		goto flagToWhere;
	}
	if (x == 10 && (y == 3 || y == 4))//返回菜单
	{
		system("cls");
		flag_gotomenu = 1;
		return 0;
	}

	if (chsBoard[x][y] == col)
	{
		return x * -10 - y;
	}
	if (!valid(m, n, x, y))//判断有无玩家的棋子,是否超出范围2
	{
		system("cls");
		plot2();
		cout << "你不能下在这里哦" << endl;
		goto flagToWhere;
	}

	return x * 10 + y;//十位是行数，个位是列数
}
/*************************************************************************************************************************************/
//输入玩家操作的棋子坐标,目的地，棋子颜色  更改棋盘与棋子的位置记录
void move(int m, int n, int x, int y, int col)
{
	int i, j, k, l;//循环变量

	if (abs(m - x) <= 1 && abs(n - y) <= 1)
	{
		chsBoard[x][y] = col;
		chess[col + 1][x][y] = true;
		chess[col + 1][0][0]++;

		//改变周围棋的颜色
		for (i = x - 1; i <= x + 1; i++)
		{
			for (j = y - 1; j <= y + 1; j++)
			{
				if (i <= 0 || i >= 8 || j <= 0 || j >= 8)
				{
					continue;
				}
				if (i == x && j == y)
					continue;
				if (chsBoard[i][j] == -1 * col)
				{
					chsBoard[i][j] = col;
					chess[col + 1][i][j] = true;
					chess[1 + col][0][0]++;
					chess[1 - col][i][j] = false;
					chess[1 - col][0][0]--;
				}
			}
		}
	}
	else
	{
		chsBoard[x][y] = col;
		chsBoard[m][n] = 0;
		chess[col + 1][x][y] = true;
		chess[col + 1][0][0]++;
		chess[col + 1][m][n] = false;
		chess[col + 1][0][0]--;

		//改变周围棋的颜色
		for (i = x - 1; i <= x + 1; i++)
		{
			for (j = y - 1; j <= y + 1; j++)
			{
				if (i <= 0 || i >= 8 || j <= 0 || j >= 8)
				{
					continue;
				}
				if (i == x && j == y)
					continue;
				if (chsBoard[i][j] == -1 * col)
				{
					chsBoard[i][j] = col;
					chess[1 + col][i][j] = true;
					chess[1 + col][0][0]++;
					chess[1 - col][i][j] = false;
					chess[1 - col][0][0]--;
				}
			}
		}
	}
}
/*************************************************************************************************************************************/
//AI的函数
int maxDepth = 3;//调节难度
double weight[8][8] = { { 1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5, },
{ 1.5,1,0.965051,0.849347,0.803681,0.779659,0.789668,1, },
{ 1.5,0.965051,0.87366,0.835621,0.743914,0.715635,0.719026,0.789668, },
{ 1.5,0.849347,0.835621,0.788361,0.701912,0.677423,0.715635,0.779659, },
{ 1.5,0.803681,0.743914,0.701912,0.70752,0.701912,0.743914,0.803681, },
{ 1.5,0.779659,0.715635,0.677423,0.701912,0.788361,0.835621,0.849347, },
{ 1.5,0.789667,0.719026,0.715635,0.743914,0.835621,0.87366,0.965051, },
{ 1.5,1,0.789668,0.779659,0.803681,0.849347,0.965051,1, } };
//某一个棋局状态时某种颜色棋的获益
double w(int col)
{
	int i, j, k, l;//循环变量

	double win = 0;
	for (i = 1; i <= 7; i++)
	{
		for (j = 1; j <= 7; j++)
		{
			if (chess[col + 1][i][j] == true)
			{
				win += weight[i][j];
			}
		}
	}
	if (chess[col + 1][0][0] >= 25)
		win += 20;
	return win;
}
//返回电脑的最佳收益(tempCol为userCol时找最小，tempCol为computerCol时找最大）
double search(int tempCol, int depth, double alpha, double beta)
{
	int i, j, k, l;//循环变量

	if (depth > maxDepth)//边界条件
		return w(-1 * userCol) - w(userCol);

	//特判棋局终止
	if (!judgeAll(tempCol))
	{
		if (!judgeAll(-tempCol))
			return w(-userCol);
		return search(-tempCol, depth + 1, alpha, beta);
	}

	double temp;
	if (tempCol == -1 * userCol)//电脑选最大的
	{
		alpha = -100000;
		for (i = 1; i <= 7; i++)
		{
			for (j = 1; j <= 7; j++)
			{
				if (chess[tempCol + 1][i][j] == true)
				{
					for (k = i - 2; k <= i + 2; k++)
					{
						for (l = j - 2; l <= j + 2; l++)
						{
							if (k <= 0 || k >= 8 || l <= 0 || l >= 8)
								continue;
							if (k == i && l == j)
								continue;
							if (chsBoard[k][l] != 0)
								continue;

							cpy(depth);
							move(i, j, k, l, tempCol);
							temp = search(-1 * tempCol, depth + 1, alpha, beta);
							rcpy(depth);
							if (temp > alpha)
								alpha = temp;
							if (alpha > beta)
							{
								cnt1++;
								return alpha;
							}	
						}
					}
				}
			}
		}
		return alpha;
	}
	else if (tempCol == userCol)
	{
		beta = 100000;
		for (i = 1; i <= 7; i++)
		{
			for (j = 1; j <= 7; j++)
			{
				if (chess[tempCol + 1][i][j] == true)
				{
					for (k = i - 2; k <= i + 2; k++)
					{
						for (l = j - 2; l <= j + 2; l++)
						{
							if (k <= 0 || k >= 8 || l <= 0 || l >= 8)
								continue;
							if (k == i && l == j)
								continue;
							if (chsBoard[k][l] != 0)
								continue;
							cpy(depth);
							move(i, j, k, l, tempCol);
							temp = search(-1 * tempCol, depth + 1, alpha, beta);
							rcpy(depth);
							if (temp < beta)
								beta = temp;

							if (beta < alpha)
							{
								cnt2++;
								return beta;
							}							
						}
					}
				}
			}
		}
		return beta;
	}
}
//ai搜索某种颜色下一步最佳方案，下出来并提示位置
void aiFindNextStep(int computerCol)
{
	int i, j, k, l;//循环变量

	int bestm, bestn, bestx, besty;//最佳的下棋方法，从(m, n)到(x, y)
	double temp;
	double alpha = -100000, beta = 100000;
	//循环col所有棋子的每一种可能下法
	for (i = 1; i <= 7; i++)
	{
		for (j = 1; j <= 7; j++)
		{
			if (chess[computerCol + 1][i][j] == true)
			{
				for (k = i - 2; k <= i + 2; k++)
				{
					for (l = j - 2; l <= j + 2; l++)
					{						
						if (k <= 0 || k >= 8 || l <= 0 || l >= 8)
							continue;
						if (k == i && l == j)
							continue;
						if (chsBoard[k][l] != 0)
							continue;

						cpy(0);//存储棋盘
						move(i, j, k, l, computerCol);//深搜转移状态
						temp = search(-1 * computerCol, 1, alpha, beta);//找这里的最大beta
						rcpy(0);//恢复状态
						if (temp == -100000)
						{
							goto flag;
						}
						if (temp > alpha)
						{
							alpha = temp;
						flag: {};
							bestm = i;
							bestn = j;
							bestx = k;
							besty = l;
						}
					}
				}
			}
		}
	}
	move(bestm, bestn, bestx, besty, computerCol);
	system("cls");
	plot();
	//printf("电脑从(%d, %d)下到了(%d, %d)\n", bestn, 8 - bestm, besty, 8 - bestx);

	if (computerCol == 1)
	{
		printf("    \033[41m电脑从(%d, %d)下到了(%d, %d)\033[0m\n", bestn, 8 - bestm, besty, 8 - bestx);
	}
	else if (computerCol == -1)
	{
		printf("    \033[43m\033[30m电脑从(%d, %d)下到了(%d, %d)\033[0m\n", bestn, 8 - bestm, besty, 8 - bestx);
	}
}
/*************************************************************************************************************************************/
//单人游戏
void singleMatch(int userCol)//col总是从1开始
{
	int i, j, k, l;//循环变量
	int depth = 0;
	int temp, m, n, x, y, tempCol = 1;

	if (userCol == 1)//玩家拿黑子
	{
		plot();
		while (judgeEnd() == false)
		{
			if (col == 1 && judgeAll(1) == true)
			{
			chooseSelect1:;
				whoIsNext();

				temp = select(userCol);
				m = temp / 10;
				n = temp % 10;
				if (n == 0)
					return;
				
				plot();
				cout << endl;
				whoIsNext();

				temp = towhere(m, n);
				whoIsNext();
				if (temp < 0)
				{
					if (abs(chsBoard[m][n]) == 2)
						chsBoard[m][n] /= 2;//将空心恢复
					goto chooseSelect1;
				}
				chsBoard[m][n] /= 2;//将空心恢复
				x = temp / 10;
				y = temp % 10;
				if (y == 0)
					return;

				save_last_step();
				move(m, n, x, y, col);
				plot();
				col = -1;
			}
			else if(col == 1 && judgeAll(1) == false)
			{
				cout << "您无法落子" << endl;
				goto win1;
			}

			if (col == -1 && judgeAll(-1) == true)
			{
				aiFindNextStep(-1);
				col = 1;
			}
			else if(col == -1 && judgeAll(-1) == false)
			{
				cout << "电脑无处落子" << endl;
				goto win1;
			}
		}
	win1: {};
		if (whoWin())
		{
			cout << "恭喜您获胜" << endl << "------------------------------------------------------------------------------------";
		}
		else
		{
			cout << "电脑获胜，请你再接再厉哦" << endl << "------------------------------------------------------------------------------------";
		}
	}
	//--------------------------------------------------------------------------------------------------------------------------------------------------------
	else if (userCol == -1)//玩家拿白子
	{
		plot();
		while (judgeEnd() == false)
		{
			//玩家下白子
			if (col == -1 && judgeAll(-1) == true)
			{
			chooseSelect2:;
				whoIsNext();
				temp = select(userCol);
				m = temp / 10;
				n = temp % 10;
				if (n == 0)
					return;

				plot();
				cout << endl;
				whoIsNext();

				temp = towhere(m, n);
				if (temp < 0)
				{
					if (abs(chsBoard[m][n]) == 2)
						chsBoard[m][n] /= 2;//将空心恢复
					goto chooseSelect2;
				}
				chsBoard[m][n] /= 2;//将空心恢复
				x = temp / 10;
				y = temp % 10;
				if (y == 0)
					return;

				save_last_step();
				move(m, n, x, y, col);
				col = 1;
			}
			else if(col == -1 && judgeAll(-1) == false)
			{
				cout << "您无法落子" << endl;
				goto win2;
			}

			//该机器下黑子了
			if (col == 1 && judgeAll(1) == true)
			{
				aiFindNextStep(1);
				col = -1;
			}
			else if(col == 1 && judgeAll(1) == false)
			{
				cout << "电脑无处落子" << endl;
				goto win2;
			}
		}
	win2: {};
		if (whoWin())
		{
			cout << "电脑获胜，请你再接再厉哦" << endl << "------------------------------------------------------------------------------------";
		}
		else
		{
			cout << "恭喜您获胜" << endl << "------------------------------------------------------------------------------------";
		}
	}	
}
//双人游戏
void doubleMatch()
{
	int i, j, k, l;//循环变量
	int temp, m, n, x, y;
	flag_is2 = 1;
	while (judgeEnd() == false)
	{
		if (judgeAll(col) == true)
		{
			plot2();
			whoIsNext();

			temp = select2(col);
			m = temp / 10;
			n = temp % 10;
			if (n == 0)
				return;

			temp = towhere2(m, n);
			chsBoard[m][n] /= 2;//将空心恢复
			x = temp / 10;
			y = temp % 10;
			if (y == 0)
				return;

			move(m, n, x, y, col);
			plot2();
			col *= -1;
		}
		else
		{
			col *= -1;
		}
	}
	if (whoWin())
	{
		cout << "恭喜红方获胜" << endl << "------------------------------------------------------------------------------------";
	}
	else
	{
		cout << "恭喜黄方获胜" << endl << "------------------------------------------------------------------------------------";
	}
}
/***********************************************************************************************************************************************/
int main()
{
	int i, j, k, l;//循环变量
	system("mode con cols=35 lines=32");
	//移除快速编辑模式----------------------------------------------
	HANDLE hStdin = GetStdHandle(STD_INPUT_HANDLE);
	DWORD mode;
	GetConsoleMode(hStdin, &mode);
	mode &= ~ENABLE_QUICK_EDIT_MODE;
	SetConsoleMode(hStdin, mode);
	//--------------------------------------------------------------
	 hOutput = GetStdHandle(STD_OUTPUT_HANDLE);
	//初始化棋盘
	 {
		 col = 1;
		 chsBoard[1][1] = 1;
		 last_step_chsBoard[1][1] = 1;
		 chsBoard[7][7] = 1;
		 last_step_chsBoard[7][7] = 1;
		 chsBoard[1][7] = -1;
		 last_step_chsBoard[1][7] = -1;
		 chsBoard[7][1] = -1;
		 last_step_chsBoard[7][1] = -1;
		 chess[0][1][7] = true;
		 last_step_tempchess[0][1][7] = true;
		 chess[0][7][1] = true;
		 last_step_tempchess[0][7][1] = true;
		 chess[2][1][1] = true;
		 last_step_tempchess[2][1][1] = true;
		 chess[2][7][7] = true;
		 last_step_tempchess[2][7][7] = true;
		 chess[0][0][0] = 2;
		 last_step_tempchess[0][0][0] = 2;
		 chess[2][0][0] = 2;
		 last_step_tempchess[2][0][0] = 2;
	 }

	int userChoice;//玩家的需求对应的变量
flagMain: {};
	cin.clear();
	userChoice = menu();
	if (userChoice == 1)
	{
		userCol = getCol();
		//初始化棋盘,防止返回菜单再下棋不是新棋局
	{
		col = 1;
		chsBoard[1][1] = 1;
		last_step_chsBoard[1][1] = 1;
		chsBoard[7][7] = 1;
		last_step_chsBoard[7][7] = 1;
		chsBoard[1][7] = -1;
		last_step_chsBoard[1][7] = -1;
		chsBoard[7][1] = -1;
		last_step_chsBoard[7][1] = -1;
		chess[0][1][7] = true;
		last_step_tempchess[0][1][7] = true;
		chess[0][7][1] = true;
		last_step_tempchess[0][7][1] = true;
		chess[2][1][1] = true;
		last_step_tempchess[2][1][1] = true;
		chess[2][7][7] = true;
		last_step_tempchess[2][7][7] = true;
		chess[0][0][0] = 2;
		last_step_tempchess[0][0][0] = 2;
		chess[2][0][0] = 2;
		last_step_tempchess[2][0][0] = 2;
	}
ThreeToOne: {};
		singleMatch(userCol);
		if (flag_gotomenu == 1)
		{
			flag_gotomenu = 0;
			memset(chsBoard, 0, sizeof(chsBoard));
			memset(chess, 0, sizeof(chess));
			memset(last_step_chsBoard, 0, sizeof(last_step_chsBoard));
			memset(last_step_tempchess, 0, sizeof(last_step_tempchess));
			chsBoard[1][1] = 1;
			last_step_chsBoard[1][1] = 1;
			chsBoard[7][7] = 1;
			last_step_chsBoard[7][7] = 1;
			chsBoard[1][7] = -1;
			last_step_chsBoard[1][7] = -1;
			chsBoard[7][1] = -1;
			last_step_chsBoard[7][1] = -1;
			chess[0][1][7] = true;
			last_step_tempchess[0][1][7] = true;
			chess[0][7][1] = true;
			last_step_tempchess[0][7][1] = true;
			chess[2][1][1] = true;
			last_step_tempchess[2][1][1] = true;
			chess[2][7][7] = true;
			last_step_tempchess[2][7][7] = true;
			chess[0][0][0] = 2;
			last_step_tempchess[0][0][0] = 2;
			chess[2][0][0] = 2;
			last_step_tempchess[2][0][0] = 2;
			goto flagMain;
		}
	}
	else if (userChoice == 2)
	{
	ThreeToTwo: {};
		//初始化棋盘
	{
		col = 1;
		chsBoard[1][1] = 1;
		last_step_chsBoard[1][1] = 1;
		chsBoard[7][7] = 1;
		last_step_chsBoard[7][7] = 1;
		chsBoard[1][7] = -1;
		last_step_chsBoard[1][7] = -1;
		chsBoard[7][1] = -1;
		last_step_chsBoard[7][1] = -1;
		chess[0][1][7] = true;
		last_step_tempchess[0][1][7] = true;
		chess[0][7][1] = true;
		last_step_tempchess[0][7][1] = true;
		chess[2][1][1] = true;
		last_step_tempchess[2][1][1] = true;
		chess[2][7][7] = true;
		last_step_tempchess[2][7][7] = true;
		chess[0][0][0] = 2;
		last_step_tempchess[0][0][0] = 2;
		chess[2][0][0] = 2;
		last_step_tempchess[2][0][0] = 2;
	}
		doubleMatch();
		if (flag_gotomenu == 1)
		{
			flag_gotomenu = 0;
			memset(chsBoard, 0, sizeof(chsBoard));
			memset(chess, 0, sizeof(chess));
			memset(last_step_chsBoard, 0, sizeof(last_step_chsBoard));
			memset(last_step_tempchess, 0, sizeof(last_step_tempchess));
			chsBoard[1][1] = 1;
			last_step_chsBoard[1][1] = 1;
			chsBoard[7][7] = 1;
			last_step_chsBoard[7][7] = 1;
			chsBoard[1][7] = -1;
			last_step_chsBoard[1][7] = -1;
			chsBoard[7][1] = -1;
			last_step_chsBoard[7][1] = -1;
			chess[0][1][7] = true;
			last_step_tempchess[0][1][7] = true;
			chess[0][7][1] = true;
			last_step_tempchess[0][7][1] = true;
			chess[2][1][1] = true;
			last_step_tempchess[2][1][1] = true;
			chess[2][7][7] = true;
			last_step_tempchess[2][7][7] = true;
			chess[0][0][0] = 2;
			last_step_tempchess[0][0][0] = 2;
			chess[2][0][0] = 2;
			last_step_tempchess[2][0][0] = 2;
			goto flagMain;
		}
	}
	else if (userChoice == 3)
	{
		fstream info;
		info.open("info.txt");
		info >> userCol >> col;
		for (i = 0; i <= 7; i++)
		{
			for (j = 0; j <= 7; j++)
			{
				info >> chsBoard[i][j] >> chess[0][i][j] >> chess[2][i][j];
			}
		}
		for (i = 0; i <= 7; i++)
		{
			for (j = 0; j <= 7; j++)
			{
				last_step_chsBoard[i][j] = chsBoard[i][j];
				last_step_tempchess[0][i][j] = chess[0][i][j];
				last_step_tempchess[2][i][j] = chess[2][i][j];
			}
		}
		info.close();
		cout << "接下来进行什么游戏呢？" << endl;
		cout << "1、单人游戏" << endl << "2、双人游戏" << endl;
		int temp3;
		cin >> temp3;
		if (temp3 == 1)
		{
			goto ThreeToOne;
		}
		else if (temp3 == 2)
		{
			goto ThreeToTwo;
		}
	}
	else if (userChoice == 4)
	{
		system("cls");
		cout << "你真的要退出游戏吗？" << endl;
		cout << "1、是" << endl;
		cout << "2、否" << endl;
		int temp;
		cin >> temp;
		if (temp == 1)
		{
			cout << "游戏已退出" << endl << "-------------------------------------";
			return 0;
		}
		else if (temp == 2)
		{
			system("cls");
			goto flagMain;
		}
	}
}
