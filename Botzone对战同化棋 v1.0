#include <iostream>
#include <cstring>
#include <ctime>
#include <random>
using namespace std;

short start = clock();//卡时间
short chsBoard[8][8] = { 0 };//黑棋先行，黑棋1，白棋-1;chessBoard[0][0]是白棋个数，chess[0][2]是黑棋个数
short tempchsBoard[10][8][8] = { 0 };//黑棋先行，黑棋1，白棋-1
short col = 1;
short userCol;
int cnt1 = 0; int cnt2 = 0;
int cnt = 0;
//复制棋盘与棋子
int abs(int p)
{
	if (p >= 0)
		return p;
	else
		return -p;
}
void cpy(int step)
{
	int i, j;
	for (i = 0; i <= 7; i++)
		for (j = 0; j <= 7; j++)
			tempchsBoard[step][i][j] = chsBoard[i][j];
}
//重置棋盘与棋子
void rcpy(int step)
{
	int i, j;
	for (i = 0; i <= 7; i++)
		for (j = 0; j <= 7; j++)
			chsBoard[i][j] = tempchsBoard[step][i][j];
}
//输入玩家操作的棋子坐标,目的地，棋子颜色  更改棋盘与棋子的位置记录
void move(int m, int n, int x, int y, int col)//在cheBoard里，1 + col是自己的颜色；1 - col是对方的颜色
{
	int i, j;
	chsBoard[x][y] = col;
	chsBoard[0][1 + col]++;
	//改变周围棋的颜色
	for (i = x - 1; i <= x + 1; i++)
	{
		for (j = y - 1; j <= y + 1; j++)
		{
			if (i <= 0 || i >= 8 || j <= 0 || j >= 8)
				continue;
			if (i == x && j == y)
				continue;
			if (chsBoard[i][j] == -col)
			{
				chsBoard[i][j] = col;
				chsBoard[0][1 + col]++;
				chsBoard[0][1 - col]--;
			}
		}
	}
	if (!(abs(m - x) <= 1 && abs(n - y) <= 1))
	{
		chsBoard[m][n] = 0;
		chsBoard[0][1 + col]--;
	}
}
//检测某个位置的棋子是否可以移动
bool oneCanMove(int x, int y)
{
	int i, j;
	for (i = x - 2; i <= x + 2; i++)
	{
		for (j = y - 2; j <= y + 2; j++)
		{
			//先排除非法棋步
			if (i <= 0 || i >= 8 || j <= 0 || j >= 8)
				continue;
			if (x == i && y == j)
				continue;
			if (chsBoard[i][j] == 0)
				return true;
		}
	}
	return false;
}
//检测某个棋盘下，某种颜色棋子是否可以移动
bool canMove(int col)
{
	int i, j;
	for (i = 1; i <= 7; i++)
		for (j = 1; j <= 7; j++)
			if (chsBoard[i][j] == col && oneCanMove(i, j))
				return true;
	return false;
}
/*************************************************************************************************************************************/
//AI的函数
int maxDepth;//调节难度

double weight[8][8] = { { 1,1,1,1,1,1,1,1, },
{ 1,0.99,0.965051,0.849347,0.803681,0.779659,0.965051,0.99, },
{ 1,0.96505,0.87366,0.83562,0.74391,0.83562,0.87366,0.96505, },
{ 1,0.84934,0.83562,0.78836,0.70191,0.78836,0.83562,0.84934, },
{ 1,0.80368,0.74391,0.70191,0.70752,0.70191,0.74391,0.80368, },
{ 1,0.84934,0.83562,0.78836,0.70191,0.78836,0.83562,0.84934, },
{ 1,0.96505,0.87366,0.83562,0.74391,0.83562,0.87366,0.96505, },
{ 1,0.99,0.96505,0.84934,0.80368,0.84934,0.96505,0.99, } };

//某一个棋局时某种颜色棋的获益
double w(int col)
{
	int i, j;
	if (chsBoard[0][0] + chsBoard[0][2] == 49)
	{
		if (chsBoard[0][1 + col] >= 25)
			return 1000;
		if (chsBoard[0][1 - col] >= 25)
			return -1000;
	}
	double win = 0;
	for (i = 1; i <= 7; i++)
		for (j = 1; j <= 7; j++)
			win += chsBoard[i][j] * weight[i][j];
	win *= col;
	return win;
}

//返回电脑的最佳收益(tempCol为userCol时找最小，tempCol为computerCol时找最大）
double search(int tempCol, int depth, double alpha, double beta)
{
	cnt++;
	int i, j, k, l;//循环变量
	if (depth > maxDepth)//边界条件
		return w(-userCol);

	//---------------------------------------------------------
	//卡时间，要超时就降低搜索深度
	if (depth == maxDepth - 1 && maxDepth == 2)
		if (clock() - start >= CLOCKS_PER_SEC * 0.996)
			maxDepth = 1;
	if (depth == maxDepth - 1 && maxDepth == 3)
		if (clock() - start >= CLOCKS_PER_SEC * 0.95)
			maxDepth = 2;
	if (depth == maxDepth - 2 && maxDepth == 4)
		if (clock() - start >= CLOCKS_PER_SEC * 0.90)
			maxDepth = 3;
	if (depth == maxDepth - 2 && maxDepth >= 5)
		if (clock() - start >= CLOCKS_PER_SEC * 0.85)
			--maxDepth;
	//---------------------------------------------------------
	//特判棋局终止
	if (!canMove(tempCol))
	{
		if (!canMove(-tempCol))
			return w(-userCol);
		return search(-tempCol, depth + 1, alpha, beta);
	}

	double temp;
	if (tempCol == -userCol)//电脑选最大的
	{
		alpha = -100000;//不要用一开始传下来的alpha！！！！！！！
		for (i = 1; i <= 7; i++)
		{
			for (j = 1; j <= 7; j++)
			{
				if (chsBoard[i][j] == tempCol)
				{
					for (k = i - 2; k <= i + 2; k++)
					{
						for (l = j - 2; l <= j + 2; l++)
						{
							if (k <= 0 || k >= 8 || l <= 0 || l >= 8)
								continue;
							if (k == i && l == j)
								continue;
							if (chsBoard[k][l] != 0)
								continue;

							cpy(depth);
							move(i, j, k, l, tempCol);
							temp = search(-tempCol, depth + 1, alpha, beta);
							rcpy(depth);
							if (temp > alpha)
								alpha = temp;
							if (alpha > beta)
							{
								++cnt1;
								return alpha;
							}
						}
					}
				}
			}
		}
		return alpha;
	}
	else if (tempCol == userCol)
	{
		beta = 100000;
		for (i = 1; i <= 7; i++)
		{
			for (j = 1; j <= 7; j++)
			{
				if (chsBoard[i][j] == tempCol)
				{
					for (k = i - 2; k <= i + 2; k++)
					{
						for (l = j - 2; l <= j + 2; l++)
						{
							if (k <= 0 || k >= 8 || l <= 0 || l >= 8)
								continue;
							if (k == i && l == j)
								continue;
							if (chsBoard[k][l] != 0)
								continue;
							cpy(depth);
							move(i, j, k, l, tempCol);
							temp = search(-tempCol, depth + 1, alpha, beta);
							rcpy(depth);
							if (temp < beta)
								beta = temp;
							if (beta < alpha)
							{
								++cnt2;
								return beta;
							}
						}
					}
				}
			}
		}
		return beta;
	}
}

//ai搜索某种颜色下一步最佳方案，下出来并提示位置
void aiFindNextStep(int computerCol)
{
	int i, j, k, l;//循环变量

	int bestm = 0, bestn = 0, bestx = 0, besty = 0;//最佳的下棋方法，从(m, n)到(x, y)
	double temp;
	double alpha = -100000, beta = 100000;
	//循环col所有棋子的每一种可能下法
	for (i = 1; i <= 7; i++)
	{
		for (j = 1; j <= 7; j++)
		{
			if (chsBoard[i][j] == computerCol)
			{
				for (k = i - 2; k <= i + 2; k++)
				{
					for (l = j - 2; l <= j + 2; l++)
					{
						if (k <= 0 || k >= 8 || l <= 0 || l >= 8)
							continue;
						if (k == i && l == j)
							continue;
						if (chsBoard[k][l] != 0)
							continue;

						cpy(0);//存储棋盘
						move(i, j, k, l, computerCol);//深搜转移状态
						temp = search(-computerCol, 1, alpha, beta);//找这里的最大beta
						rcpy(0);//恢复状态
						if (temp == -100000)
						{
							goto flag;
						}
						if (temp > alpha)
						{
							alpha = temp;
						flag: {};
							bestm = i;
							bestn = j;
							bestx = k;
							besty = l;
						}
					}
				}
			}
		}
	}
	move(bestm, bestn, bestx, besty, computerCol);
	cout << bestm - 1 << " " << bestn - 1 << " " << bestx - 1 << " " << besty - 1 << endl;
	cout << chsBoard[0][0] << " " << chsBoard[0][2] << " " << cnt << " " << cnt1 << " " << cnt2 << " " << maxDepth << " " << (clock() - start) * 1.0000 / CLOCKS_PER_SEC;
	return;
}
/*************************************************************************************************************************************/
int main()
{
	maxDepth = 4;

	//初始化棋盘
	chsBoard[1][1] = 1;
	chsBoard[7][7] = 1;
	chsBoard[0][0] = 2;
	chsBoard[1][7] = -1;
	chsBoard[7][1] = -1;
	chsBoard[0][2] = 2;

	userCol = 1;
	col = 1;
	int time;
	int m, n, x, y;
	cin >> time;
	userCol = 1; // 第一回合收到坐标是-1, -1，说明我是黑方
	for (int i = 0; i < time - 1; i++)
	{
		// 根据这些输入输出逐渐恢复状态到当前回合
		cin >> m >> n >> x >> y;
		if (x >= 0)
		{
			m++;
			n++;
			x++;
			y++;
			move(m, n, x, y, userCol); // 模拟对方落子
		}
		else
		{
			userCol = -1;
		}
		cin >> m >> n >> x >> y;
		m++;
		n++;
		x++;
		y++;
		if (x >= 0)
			move(m, n, x, y, -1 * userCol); // 模拟己方落子
	}
	cin >> m >> n >> x >> y;
	if (m >= 0)
	{
		m++;
		n++;
		x++;
		y++;
		move(m, n, x, y, userCol); // 模拟对方落子
	}
	else
		userCol = -1;
	//---------------------------------------------------------

	//36个子之前用6步搜索
	if (chsBoard[0][0] + chsBoard[0][2] <= 36)
		maxDepth = 4;
	//44个子之后用8步搜索
	if (chsBoard[0][0] + chsBoard[0][2] >= 40)
		maxDepth = 6;
	//47个子之后用9步搜索
	if (chsBoard[0][0] + chsBoard[0][2] >= 47)
		maxDepth = 7;

	//---------------------------------------------------------
	start = clock();
	if (userCol == 1)//玩家拿黑子
		aiFindNextStep(-1);
	else if (userCol == -1)//玩家拿白子
		aiFindNextStep(1);
}
